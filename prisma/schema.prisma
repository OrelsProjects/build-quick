// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model InterestedUser {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ProductRequest ProductRequest[]
  UserOrders     UserOrders[]

  @@map("interestedUser")
}

model ProductRequest {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  ideaName                String
  elevatorPitch           String
  templateName            String
  wasInterestedInTemplate Boolean?
  additionalFeature       String?
  additionalInfo          String?

  requestedAt DateTime @default(now())

  userEmail String

  user InterestedUser @relation(fields: [userEmail], references: [email])

  @@map("productRequest")
}

model Product {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  currency    String
  price       Float
  description String

  Orders UserOrders[]

  @@map("product")
}

model UserOrders {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  orderId    String   @unique
  email      String
  productId String   @db.ObjectId
  quantity   Int
  total      Float
  status     String   @default("pending") // pending, completed, cancelled
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user     InterestedUser @relation(fields: [email], references: [email])
  product Product        @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("userOrders")
}
